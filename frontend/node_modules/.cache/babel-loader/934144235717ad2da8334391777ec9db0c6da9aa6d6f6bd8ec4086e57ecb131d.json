{"ast":null,"code":"export const date2time = date => {\n  return `${date.getHours() < 10 ? \"0\" : \"\"}${date.getHours()}` + `:${date.getMinutes() < 10 ? \"0\" : \"\"}${date.getMinutes()}`;\n};\nexport const date2date = date => {\n  return `${date.getFullYear()}` + `-${date.getMonth() < 9 ? \"0\" : \"\"}${date.getMonth() + 1}` + `-${date.getDate() < 10 ? \"0\" : \"\"}${date.getDate()}`;\n};\nexport const datetime2str = (date, time) => {\n  return `${date}T${time}`;\n};\nexport const str2datetime = str => {\n  const [date, rest] = str.split(\"T\");\n  const [time, _] = rest.split(\".\");\n  return {\n    date,\n    time: time.substring(0, 5)\n  };\n};\nexport const utcDate2kstDate = utcDateString => {\n  // UTC 문자열을 Date 객체로 변환\n  const kstDate = new Date(utcDateString);\n\n  // 변환된 날짜를 원하는 포맷으로 반환\n  const year = kstDate.getFullYear();\n  const month = String(kstDate.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 +1\n  const day = String(kstDate.getDate()).padStart(2, \"0\");\n  const hours = String(kstDate.getHours()).padStart(2, \"0\");\n  const minutes = String(kstDate.getMinutes()).padStart(2, \"0\");\n  const seconds = String(kstDate.getSeconds()).padStart(2, \"0\");\n  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\n};\nexport const isAuthenticationRequired = currentPath => {\n  const nonAuthenticatedPaths = [\"/login\", \"/signup\", \"/\"];\n  return !nonAuthenticatedPaths.includes(currentPath);\n};","map":{"version":3,"names":["date2time","date","getHours","getMinutes","date2date","getFullYear","getMonth","getDate","datetime2str","time","str2datetime","str","rest","split","_","substring","utcDate2kstDate","utcDateString","kstDate","Date","year","month","String","padStart","day","hours","minutes","seconds","getSeconds","isAuthenticationRequired","currentPath","nonAuthenticatedPaths","includes"],"sources":["/Users/e210100067/Desktop/fe_project/frontend/src/utils/utils.ts"],"sourcesContent":["export const date2time = (date: Date) => {\r\n  return (\r\n    `${date.getHours() < 10 ? \"0\" : \"\"}${date.getHours()}` +\r\n    `:${date.getMinutes() < 10 ? \"0\" : \"\"}${date.getMinutes()}`\r\n  );\r\n};\r\n\r\nexport const date2date = (date: Date) => {\r\n  return (\r\n    `${date.getFullYear()}` +\r\n    `-${date.getMonth() < 9 ? \"0\" : \"\"}${date.getMonth() + 1}` +\r\n    `-${date.getDate() < 10 ? \"0\" : \"\"}${date.getDate()}`\r\n  );\r\n};\r\n\r\nexport const datetime2str = (date: string, time: string) => {\r\n  return `${date}T${time}`;\r\n};\r\n\r\nexport const str2datetime = (str: string) => {\r\n  const [date, rest] = str.split(\"T\");\r\n  const [time, _] = rest.split(\".\");\r\n  return { date, time: time.substring(0, 5) };\r\n};\r\n\r\nexport const utcDate2kstDate = (utcDateString: string) => {\r\n  // UTC 문자열을 Date 객체로 변환\r\n  const kstDate = new Date(utcDateString);\r\n\r\n  // 변환된 날짜를 원하는 포맷으로 반환\r\n  const year = kstDate.getFullYear();\r\n  const month = String(kstDate.getMonth() + 1).padStart(2, \"0\"); // 월은 0부터 시작하므로 +1\r\n  const day = String(kstDate.getDate()).padStart(2, \"0\");\r\n  const hours = String(kstDate.getHours()).padStart(2, \"0\");\r\n  const minutes = String(kstDate.getMinutes()).padStart(2, \"0\");\r\n  const seconds = String(kstDate.getSeconds()).padStart(2, \"0\");\r\n\r\n  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\nexport const isAuthenticationRequired = (currentPath: string) => {\r\n  const nonAuthenticatedPaths = [\"/login\", \"/signup\", \"/\"];\r\n\r\n  return !nonAuthenticatedPaths.includes(currentPath);\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,IAAU,IAAK;EACvC,OACE,GAAGA,IAAI,CAACC,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGD,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAE,GACtD,IAAID,IAAI,CAACE,UAAU,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGF,IAAI,CAACE,UAAU,CAAC,CAAC,EAAE;AAE/D,CAAC;AAED,OAAO,MAAMC,SAAS,GAAIH,IAAU,IAAK;EACvC,OACE,GAAGA,IAAI,CAACI,WAAW,CAAC,CAAC,EAAE,GACvB,IAAIJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAGL,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,GAC1D,IAAIL,IAAI,CAACM,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGN,IAAI,CAACM,OAAO,CAAC,CAAC,EAAE;AAEzD,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAACP,IAAY,EAAEQ,IAAY,KAAK;EAC1D,OAAO,GAAGR,IAAI,IAAIQ,IAAI,EAAE;AAC1B,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,GAAW,IAAK;EAC3C,MAAM,CAACV,IAAI,EAAEW,IAAI,CAAC,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;EACnC,MAAM,CAACJ,IAAI,EAAEK,CAAC,CAAC,GAAGF,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;EACjC,OAAO;IAAEZ,IAAI;IAAEQ,IAAI,EAAEA,IAAI,CAACM,SAAS,CAAC,CAAC,EAAE,CAAC;EAAE,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMC,eAAe,GAAIC,aAAqB,IAAK;EACxD;EACA,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACF,aAAa,CAAC;;EAEvC;EACA,MAAMG,IAAI,GAAGF,OAAO,CAACb,WAAW,CAAC,CAAC;EAClC,MAAMgB,KAAK,GAAGC,MAAM,CAACJ,OAAO,CAACZ,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACiB,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EAC/D,MAAMC,GAAG,GAAGF,MAAM,CAACJ,OAAO,CAACX,OAAO,CAAC,CAAC,CAAC,CAACgB,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACtD,MAAME,KAAK,GAAGH,MAAM,CAACJ,OAAO,CAAChB,QAAQ,CAAC,CAAC,CAAC,CAACqB,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACzD,MAAMG,OAAO,GAAGJ,MAAM,CAACJ,OAAO,CAACf,UAAU,CAAC,CAAC,CAAC,CAACoB,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC7D,MAAMI,OAAO,GAAGL,MAAM,CAACJ,OAAO,CAACU,UAAU,CAAC,CAAC,CAAC,CAACL,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAE7D,OAAO,GAAGH,IAAI,IAAIC,KAAK,IAAIG,GAAG,IAAIC,KAAK,IAAIC,OAAO,IAAIC,OAAO,EAAE;AACjE,CAAC;AAED,OAAO,MAAME,wBAAwB,GAAIC,WAAmB,IAAK;EAC/D,MAAMC,qBAAqB,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,GAAG,CAAC;EAExD,OAAO,CAACA,qBAAqB,CAACC,QAAQ,CAACF,WAAW,CAAC;AACrD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}